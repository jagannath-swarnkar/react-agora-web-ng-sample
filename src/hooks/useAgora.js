import React, { useEffect, useState } from 'react'
import AgoraRTC, {
    IAgoraRTCClient, 
    IAgoraRTCRemoteUser, 
    MicrophoneAudioTrackInitConfig, 
    CameraVideoTrackInitConfig, 
    IMicrophoneAudioTrack, 
    ICameraVideoTrack, 
    ILocalVideoTrack, 
    ILocalAudioTrack 
} from 'agora-rtc-sdk-ng';
  
/**
 * @description Hooks to get agora functions
 * @author jagannath
 * @date 22/04/2021
 * @param client
 * @return {*} {
        localAudioTrack,
        localVideoTrack,
        joinState,
        leave,
        Join,
        remoteUsers,
      } 
 */
const useAgora = (client) => {
    const [localVideoTrack, setLocalVideoTrack] = useState();
    const [localAudioTrack, setLocalAudioTrack] = useState();
    const [joinState, setJoinState] = useState(false);
    const [remoteUsers, setRemoteUsers] = useState([]);

    useEffect(() => {
        // console.log('remoteUsers', client.remoteUsers)
        if (!client) return;
        setRemoteUsers(client.remoteUsers);
    
        const handleUserPublished = async (user, mediaType) => {
            console.log('user, mediaType', user, mediaType)
          await client.subscribe(user, mediaType);
          // toggle rerender while state of remoteUsers changed.
          setRemoteUsers(remoteUsers => Array.from(client.remoteUsers));
        }
        const handleUserUnpublished = (user) => {
          setRemoteUsers(remoteUsers => Array.from(client.remoteUsers));
        }
        const handleUserJoined = (user) => {
          setRemoteUsers(remoteUsers => Array.from(client.remoteUsers));
        }
        const handleUserLeft = (user) => {
          setRemoteUsers(remoteUsers => Array.from(client.remoteUsers));
        }
        client.on('user-published', handleUserPublished);
        client.on('user-unpublished', handleUserUnpublished);
        client.on('user-joined', handleUserJoined);
        client.on('user-left', handleUserLeft);
    
        return () => {
          client.off('user-published', handleUserPublished);
          client.off('user-unpublished', handleUserUnpublished);
          client.off('user-joined', handleUserJoined);
          client.off('user-left', handleUserLeft);
        };
      }, [client]);

   const createLocalTracks = async() => {
       try {
           const [microphoneTrack, cameraTrack] = await AgoraRTC.createMicrophoneAndCameraTracks();
           setLocalAudioTrack(microphoneTrack);
           setLocalVideoTrack(cameraTrack);
           return [microphoneTrack, cameraTrack];
       } catch (error) {
           console.error("createLocalTracks error", error);
       }
    }

    /**
     * @description call this method to Join call with creds
     * @author jagannath
     * @date 22/04/2021
     * @param appid:String - agora app id
     * @param channel:String - Channel name
     * @param token?:String - token for role management
     * @param uid?:String- Integer - unique userid (default generated by agora)
     */
    const join = async(appid, channel, token=null, uid=null)=>{
        if(!client) return;
        try {
            const [microphoneTrack, cameraTrack] = await createLocalTracks();
            await client.join(appid, channel, token || null);
            await client.publish([microphoneTrack, cameraTrack]);
            
            
            window.client = client;
            window.videoTrack = cameraTrack;
            setJoinState(true);
        } catch (error) {
            console.error('Join error',error)
        }
    }

    const leave = async() => {
        if (localAudioTrack) {
          localAudioTrack.stop();
          localAudioTrack.close();
        }
        if (localVideoTrack) {
          localVideoTrack.stop();
          localVideoTrack.close();
        }
        setRemoteUsers([]);
        setJoinState(false);
        await client?.leave();
      }

    return {
        localAudioTrack,
        localVideoTrack,
        joinState,
        leave,
        join,
        remoteUsers,
      };
}

export default useAgora
